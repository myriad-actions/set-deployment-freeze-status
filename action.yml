name: 'update deployment freeze'
description: 'A deployment_freeze_status tag is defined on AWS resource,  '
inputs:
  environment:
    description: >-
      one of the testing, preprod or prod envinronment, for the workflow run
    required: true
    type: string
  github-pat:
    description: >-
      GitHub personal access token
    required: true
  status:
    description: >-
      new status to be applied
    required: false

runs:
  using: "composite"
  steps:
    - name: init job  
      uses: myriad-actions/init-job@main
      with:
        github-pat: ${{ inputs.github-pat }}
    - name: load testing config
      if: inputs.environment == 'testing' && env.HOST_MODE == 'ecs'
      run: |
        echo "CLUSTER=${{ env.AWS-ECS-CLUSTER-NAME-TESTING }}" >> $GITHUB_ENV
      shell: bash
    - name: load preprod config
      if: inputs.environment == 'preprod' && env.HOST_MODE == 'ecs'
      run: |
        echo "CLUSTER=${{ env.AWS-ECS-CLUSTER-NAME-PREPROD }}" >> $GITHUB_ENV
      shell: bash
    - name: load prod config
      if: inputs.environment == 'prod' && env.HOST_MODE == 'ecs'
      run: |
        echo "CLUSTER=${{ env.AWS-ECS-CLUSTER-NAME-PROD }}" >> $GITHUB_ENV
      shell: bash
    - name: Configure AWS credentials 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS-ROLE-TO-ASSUME }}
        aws-region: ${{ env.AWS-REGION }}
    - name: update ecs tag 
      if: "${{ env.HOST_MODE == 'ecs' }}"
      run: |        
        aws ecs tag-resource --resource-arn \
        $(aws ecs describe-services --cluster ${{ env.CLUSTER }}  --services ${{ env.ECS_TASK }} \
        --query 'services[].serviceArn' | jq  -r ".[]") \
        --tags key=deployment-freeze-status,value=${{ inputs.status }}
      shell: bash

    - name: set resource
      if: "${{ env.HOST_MODE == 'ec2' }}"
      run: |
        echo RESOURCE=$(aws ec2 describe-instances --region ${{ env.AWS-REGION }} --filters "Name=tag:Environment,Values=${{ inputs.environment }}" "Name=tag:role,Values=${{ env.ROLE }}" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].InstanceId' | jq -r ".[] | .[]" )  >> $GITHUB_ENV
      shell: bash
    - name: update ec2 tag 
      if: "${{ env.HOST_MODE == 'ec2' }}"
      run: |
        aws ec2 create-tags --region ${{ env.AWS-REGION }} --resources ${{ env.RESOURCE }} --tags Key=deployment-freeze-status,Value=${{ inputs.status }}
      shell: bash
